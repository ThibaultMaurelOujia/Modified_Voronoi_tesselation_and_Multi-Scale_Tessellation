cmake_minimum_required(VERSION 3.1)
project(ParallelDelaunay)

set(CMAKE_C_COMPILER "/opt/homebrew/opt/llvm/bin/clang")
set(CMAKE_CXX_COMPILER "/opt/homebrew/opt/llvm/bin/clang++")

# Recherche des packages nécessaires (CGAL et TBB)
find_package(CGAL REQUIRED)
find_package(TBB REQUIRED)
include(CGAL_TBB_support) # Includes a module from CGAL

find_package(MPI REQUIRED)
add_definitions(${MPI_CXX_COMPILE_FLAGS})
include_directories(${MPI_CXX_INCLUDE_PATH})

find_package(GMP REQUIRED)
include_directories(${GMP_INCLUDE_DIRS})
link_directories(${GMP_LIBRARY_DIRS})

find_package(Qhull CONFIG REQUIRED)

# Ajout des bibliothèques et des include directories au projet
include_directories(${CGAL_INCLUDE_DIRS} ${TBB_INCLUDE_DIRS})
link_directories(${CGAL_LIBRARY_DIRS} ${TBB_LIBRARY_DIRS})

# /Od: Désactive les optimisations (équivalent à -O0 dans GCC).
# /O1: Optimise pour la taille (semblable à -Os dans GCC).
# /O2: Optimise pour la vitesse (semblable à -O2 dans GCC).
# /Ox: Optimise pour la vitesse maximale avec des optimisations plus agressives (semble proche de -O3 dans GCC, mais pas exactement la même chose).
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O2")
set(CMAKE_CXX_STANDARD 20)


OPTION (USE_OpenMP "Use OpenMP to enamble <omp.h>" ON)

# Find OpenMP
if(APPLE AND USE_OpenMP)
    if(CMAKE_C_COMPILER_ID MATCHES "Clang")
        set(OpenMP_C "${CMAKE_C_COMPILER}")
        set(OpenMP_C_FLAGS "-fopenmp -Wno-unused-command-line-argument")
        set(OpenMP_C_LIB_NAMES "libomp" "libgomp" "libiomp5")
        set(OpenMP_libomp_LIBRARY ${OpenMP_C_LIB_NAMES})
        set(OpenMP_libgomp_LIBRARY ${OpenMP_C_LIB_NAMES})
        set(OpenMP_libiomp5_LIBRARY ${OpenMP_C_LIB_NAMES})
    endif()
    if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
      set(OpenMP_CXX "${CMAKE_CXX_COMPILER}")
      set(OpenMP_CXX_FLAGS "-fopenmp -Wno-unused-command-line-argument")
      set(OpenMP_CXX_LIB_NAMES "libomp" "libgomp" "libiomp5")
      set(OpenMP_libomp_LIBRARY ${OpenMP_CXX_LIB_NAMES})
      set(OpenMP_libgomp_LIBRARY ${OpenMP_CXX_LIB_NAMES})
      set(OpenMP_libiomp5_LIBRARY ${OpenMP_CXX_LIB_NAMES})
    endif()
endif()

if(USE_OpenMP)
  find_package(OpenMP REQUIRED)
endif(USE_OpenMP)

if (OPENMP_FOUND)
    # include_directories("${OPENMP_INCLUDES}")
    # link_directories("${OPENMP_LIBRARIES}")
    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    # set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif(OPENMP_FOUND)


# Ajouter un message pour vérifier si OpenMP est trouvé
if(OpenMP_omp_FOUND OR OpenMP_CXX_FOUND)
    message(STATUS "OpenMP found")
else()
    message(WARNING "OpenMP not found")
endif()

# Ignorer l'erreur "unused-command-line-argument" pour les systèmes Apple
if(APPLE)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-error=unused-command-line-argument")
endif()

# Création de l'exécutable avec le fichier source
add_executable(parallel_delaunay_multiscale main.cpp parallel_delaunay.cpp utile.cpp print_data.cpp modified_voronoi.cpp multiscale_tessellation.cpp test_function.cpp)

# Then on all target using TBB, link with CGAL::TBB_support
# Liaison des bibliothèques nécessaires à l'exécutable
target_link_libraries(parallel_delaunay_multiscale PRIVATE CGAL::TBB_support ${GMP_LIBRARIES} Qhull::qhullcpp Qhull::qhull_r ${MPI_CXX_LIBRARIES} ${MPI_CXX_LINK_FLAGS})